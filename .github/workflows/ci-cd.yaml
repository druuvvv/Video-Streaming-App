name: CI/CD Pipeline

on:
  push:
    branches:
      - master  # Trigger the workflow on push to the master branch
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      - name: Verify Docker Compose installation
        run: docker-compose --version

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '22.6.0'

      - name: Install dependencies
        run: npm install

      - name: Build Docker images
        run: docker-compose build

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Push Docker images
        run: |
          # Push the Docker images to Docker Hub
          docker-compose push

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Deploy to EC2
      env:
        EC2_HOST: ${{ secrets.EC2_HOST }}
        EC2_USER: ${{ secrets.EC2_USER }}
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      run: |
        echo "$SSH_PRIVATE_KEY" > private_key.pem
        chmod 600 private_key.pem
        ssh -i private_key.pem -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST << EOF
          # Pull the latest images
          sudo docker pull ${{ secrets.EC2_USER }}/video-streaming-app-app:latest
          
          # Stop and remove any existing containers (adjust container names as needed)
          sudo docker stop your-container-name || true
          sudo docker rm your-container-name || true
          
          # Run the new container
          sudo docker run -d --name your-container-name -p 80:80 your-dockerhub-username/your-image-name:latest
        EOF
